import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import xyz.jpenilla.runtask.task.AbstractRun

plugins {
    id 'com.gradleup.shadow'
    id "xyz.jpenilla.run-paper" version "2.3.1"
    id 'org.jetbrains.kotlin.jvm' version "2.0.20"
}

configurations {
    include
    implementation.extendsFrom(include)
}

subprojects {
    plugins.apply("org.jetbrains.kotlin.jvm")

    configurations {
        include
        implementation.extendsFrom(include)
    }

    repositories {
        mavenCentral()
        maven { url 'https://repo.codemc.io/repository/maven-releases/' }
        maven { url "https://repo.papermc.io/repository/maven-public/" }
    }

    dependencies {
        api project(":base")
        include "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1"
    }
}

dependencies {
    include project(":server:common")
    include project(":server:paper")
}

shadowJar {
    configurations = [project.configurations.include]

    dependencies {
        exclude dependency('org.slf4j:slf4j-api')
        exclude dependency("org.jetbrains:annotations")
    }

    exclude("DebugProbesKt.bin", "META-INF/*.kotlin_module")
    minimize {
        exclude dependency(libs.exposed.jdbc.get())
        exclude dependency(libs.exposed.core.get())
        exclude project(":server:paper")
        exclude project(":server:common")
    }
    mergeServiceFiles()
}

task dist(type: ShadowJar, group: "build") {
    configurations = [project.configurations.include]
    archiveClassifier.set("dist")

    dependencies {
        exclude dependency('org.slf4j:slf4j-api')
        exclude dependency("org.jetbrains:annotations")
    }

    exclude("DebugProbesKt.bin", "META-INF/*.kotlin_module")
    minimize {
        exclude dependency(libs.exposed.jdbc.get())
        exclude dependency(libs.exposed.core.get())
        exclude project(":server:paper")
        exclude project(":server:common")
    }
    mergeServiceFiles()

    def rel = "arcnode.nullprotect.server.libs"
    relocate "com.zaxxer.hikari", "${rel}.hikari"
    relocate "cn.afternode", "${rel}.afternode"
    relocate "kotlinx", "${rel}.kotlinx"
    relocate "kotlin", "${rel}.kotlin"
    relocate "org.jetbrains.exposed", "${rel}.exposed"
    relocate "_COROUTINE", "${rel}._COROUTINE"
}

runServer {
    // Configure the Minecraft version for our task.
    // This is the only required configuration besides applying the plugin.
    // Your plugin's jar (or shadowJar if present) will be used automatically.
    minecraftVersion("1.21.1")

    downloadPlugins {
        modrinth("packetevents", "2.4.0")
    }
}

tasks.withType(AbstractRun) {
    javaLauncher = javaToolchains.launcherFor {
        vendor = JvmVendorSpec.JETBRAINS
        languageVersion = JavaLanguageVersion.of(21)
    }
    jvmArgs("-XX:+AllowEnhancedClassRedefinition", "-Djava.net.useSystemProxies")
}
repositories {
    mavenCentral()
}
kotlin {
    jvmToolchain(21)
}
